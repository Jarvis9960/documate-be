const { validationResult } = require("express-validator");
const Admin = require("../Models/UserModel");
const jwt = require("jsonwebtoken");
const firebaseAdmin = require("firebase-admin");

// Initialize Firebase Admin SDK with your service account credentials.
// Replace the path with the location of your service account key JSON file.
firebaseAdmin.initializeApp({
  credential: firebaseAdmin.credential.cert(
    require("../Config/firebaseServiceAccountKey.json")
  ),
});

// Create Admin remains mostly the same.
const createAdmin = async (req, res) => {
  // Validate request body
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      status: false,
      message: "Validation errors",
      data: errors.array(),
    });
  }

  const { name, mobileNumber, role } = req.body;

  try {
    const existingAdmin = await Admin.findOne({ mobileNumber });
    if (existingAdmin) {
      return res.status(400).json({
        status: false,
        message: "Mobile number already exists",
        data: null,
      });
    }

    // Create a new admin
    const newAdmin = new Admin({
      name,
      mobileNumber,
      role,
    });

    // Save to database
    await newAdmin.save();

    return res.status(201).json({
      status: true,
      message: "Admin created successfully",
      data: newAdmin,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      status: false,
      message: "Internal Server Error",
      err: error,
    });
  }
};

// The login process now expects an ID token generated by Firebase on the client side.
const loginAdmin = async (req, res) => {
  // Validate request body
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      status: false,
      message: "Validation errors",
      data: errors.array(),
    });
  }

  try {
    // Expect the client to send the Firebase ID token
    const { idToken } = req.body;
    if (!idToken) {
      return res.status(400).json({
        status: false,
        message: "Missing Firebase ID token",
      });
    }

    // Verify the Firebase ID token
    const decodedToken = await firebaseAdmin.auth().verifyIdToken(idToken);
    // Extract the phone number from the token
    // (Firebase includes the phone number in E.164 format, e.g., +919876543210)
    const phoneNumber = decodedToken.phone_number;
    if (!phoneNumber) {
      return res.status(400).json({
        status: false,
        message: "Phone number not found in token",
      });
    }

    console.log(phoneNumber);
    const phoneNumberWithoutCode = phoneNumber.startsWith("+91")
      ? phoneNumber.slice(3)
      : phoneNumber;
    // Look up the admin using the phone number
    const admin = await Admin.findOne({ mobileNumber: phoneNumberWithoutCode });
    if (!admin) {
      return res.status(404).json({
        status: false,
        message: "Admin not found",
      });
    }

    // Generate JWT token for session management
    const token = jwt.sign(
      { id: admin._id, role: admin.role },
      "DOCUMATESECRET",
      { expiresIn: "24h" }
    );

    // Set cookie with the JWT token
    res.cookie("token", token, {
      httpOnly: true,
      secure: true,
      sameSite: "none",
    });
    

    return res.status(200).json({
      status: true,
      message: "Login successful",
      data: {
        id: admin._id,
        name: admin.name,
        role: admin.role,
      },
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      status: false,
      message: "Internal Server Error",
    });
  }
};

// The logout and profile endpoints remain unchanged.
const logoutAdmin = (req, res) => {
  res.clearCookie("token");
  return res.status(200).json({
    status: true,
    message: "Logged out successfully",
  });
};

const getAdminProfile = async (req, res) => {
  // Validate request
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      status: false,
      message: "Validation errors",
      data: errors.array(),
    });
  }

  try {
    const admin = await Admin.findById(req.user.id);
    if (!admin) {
      return res.status(404).json({
        status: false,
        message: "Admin not found",
      });
    }

    return res.status(200).json({
      status: true,
      data: admin,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      status: false,
      message: "Internal Server Error",
    });
  }
};

const getAllAdmins = async (req, res) => {
  try {
    // Check if the logged-in user is a superadmin
    if (req.user.role !== "superadmin") {
      return res.status(403).json({
        status: false,
        message: "Unauthorized admin",
      });
    }

    // Fetch all admins from the database
    const admins = await Admin.find().select("-__v -createdAt -updatedAt");

    return res.status(200).json({
      status: true,
      message: "Admins fetched successfully",
      data: admins,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      status: false,
      message: "Internal Server Error",
    });
  }
};

const updateAdminRole = async (req, res) => {
  const { id } = req.params;
  const { role } = req.body;

  // Validate role
  if (!['admin', 'superadmin'].includes(role)) {
    return res.status(400).json({
      status: false,
      message: "Invalid role. Role must be 'admin' or 'superadmin'.",
    });
  }

  try {
    // Update the admin's role
    const admin = await Admin.findByIdAndUpdate(
      id,
      { role },
      { new: true } // Return the updated document
    );

    if (!admin) {
      return res.status(404).json({
        status: false,
        message: "Admin not found.",
      });
    }

    return res.status(200).json({
      status: true,
      message: "Admin role updated successfully.",
      data: admin,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      status: false,
      message: "Internal Server Error.",
    });
  }
};

module.exports = {
  createAdmin,
  loginAdmin,
  logoutAdmin,
  getAdminProfile,
  getAllAdmins, 
  updateAdminRole, // Export the new controller
};
